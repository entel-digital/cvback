# Generated by Django 4.2.5 on 2024-06-23 23:36

import cvback.events.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_jsonform.models.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("devices", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Algorithm",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("detection_classification", "Detection + classification model"),
                            ("detection_classification_tracking", "Detection + classification + tracking model"),
                            ("classification", "Classification model"),
                            ("cl_classification", "Classification classic computer vision"),
                            ("business_logic", "Custom business logic"),
                        ],
                        max_length=255,
                    ),
                ),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("name", models.CharField(max_length=30)),
                (
                    "version",
                    models.CharField(
                        max_length=30,
                        validators=[django.core.validators.RegexValidator("/^\\d{1,2}\\.\\d{1,2}\\.\\d{1,3}$/g")],
                    ),
                ),
                ("repository", models.CharField(max_length=30, validators=[django.core.validators.URLValidator])),
            ],
        ),
        migrations.CreateModel(
            name="BoundingBox",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("confidence", models.FloatField(validators=[cvback.events.models.validate_relative])),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                (
                    "top_left",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.FloatField(validators=[cvback.events.models.validate_relative]), size=2
                    ),
                ),
                (
                    "bottom_right",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.FloatField(validators=[cvback.events.models.validate_relative]), size=2
                    ),
                ),
                (
                    "algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.algorithm"
                    ),
                ),
                (
                    "inference_computer",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="devices.inferencecomputer"),
                ),
            ],
            options={
                "verbose_name_plural": "Bounding boxes",
            },
        ),
        migrations.CreateModel(
            name="EventType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("name", models.CharField(max_length=30)),
                (
                    "version",
                    models.CharField(
                        max_length=30,
                        validators=[django.core.validators.RegexValidator("/^\\d{1,2}\\.\\d{1,2}\\.\\d{1,3}$/g")],
                    ),
                ),
                (
                    "documentation",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="",
                        validators=[django.core.validators.FileExtensionValidator(["pdf"])],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Frame",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("image", models.FileField(blank=True, null=True, upload_to="")),
                ("cameras", models.ManyToManyField(to="devices.camera")),
            ],
        ),
        migrations.CreateModel(
            name="InferenceClassification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("confidence", models.FloatField(validators=[cvback.events.models.validate_relative])),
                (
                    "algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.algorithm"
                    ),
                ),
                (
                    "inference_computer",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="devices.inferencecomputer"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InferenceDetectionClassification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("confidence", models.FloatField(validators=[cvback.events.models.validate_relative])),
                (
                    "algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.algorithm"
                    ),
                ),
                ("bounding_boxes", models.ManyToManyField(to="events.boundingbox")),
                (
                    "inference_computer",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="devices.inferencecomputer"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InferenceDetectionClassificationTracker",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("confidence", models.FloatField(validators=[cvback.events.models.validate_relative])),
                (
                    "tracking_ids",
                    django_jsonform.models.fields.ArrayField(base_field=models.IntegerField(), size=None),
                ),
                (
                    "algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.algorithm"
                    ),
                ),
                ("bounding_boxes", models.ManyToManyField(to="events.boundingbox")),
                (
                    "inference_computer",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="devices.inferencecomputer"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InferenceOCR",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("name", models.CharField(max_length=255)),
                ("value", models.TextField()),
                ("confidence", models.FloatField(validators=[cvback.events.models.validate_relative])),
                (
                    "algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.algorithm"
                    ),
                ),
                (
                    "inference_computer",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="devices.inferencecomputer"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "color_group",
                    models.CharField(
                        choices=[
                            ("person", "Person"),
                            ("animal", "Animal"),
                            ("vehicle", "Vehicle"),
                            ("id", "Id"),
                            ("ppe", "PPE"),
                            ("other", "Other"),
                        ],
                        max_length=255,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("video", models.FileField(blank=True, null=True, upload_to="")),
                ("cameras", models.ManyToManyField(to="devices.camera")),
            ],
        ),
        migrations.CreateModel(
            name="LineOfInterest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("added_modified", models.DateTimeField(auto_now=True, verbose_name="date modified")),
                ("enabled", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "geometry",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.FloatField(validators=[cvback.events.models.validate_relative]), size=2
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("camera", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="devices.camera")),
            ],
        ),
        migrations.CreateModel(
            name="KeyVideos",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField()),
                ("frames", models.ManyToManyField(to="events.video")),
            ],
        ),
        migrations.CreateModel(
            name="KeyInferenceOCR",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "inferences",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="events.inferenceocr"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyInferenceDetectionClassificationTracker",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "inferences",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.inferencedetectionclassificationtracker",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyInferenceDetectionClassification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "inferences",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="events.inferencedetectionclassification"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyInferenceClassification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "inferences",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="events.inferenceclassification"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyFrames",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField()),
                ("frames", models.ManyToManyField(to="events.frame")),
            ],
        ),
        migrations.AddField(
            model_name="inferencedetectionclassificationtracker",
            name="labels",
            field=models.ManyToManyField(to="events.label"),
        ),
        migrations.AddField(
            model_name="inferencedetectionclassification",
            name="labels",
            field=models.ManyToManyField(to="events.label"),
        ),
        migrations.AddField(
            model_name="inferenceclassification",
            name="label",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="events.label"),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                (
                    "confidence",
                    models.FloatField(blank=True, null=True, validators=[cvback.events.models.validate_relative]),
                ),
                ("cameras", models.ManyToManyField(to="devices.camera")),
                ("event_type", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="events.eventtype")),
                ("frames", models.ManyToManyField(to="events.frame")),
                ("inference_classification", models.ManyToManyField(blank=True, to="events.inferenceclassification")),
                (
                    "inference_detection_classification",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.inferencedetectionclassification",
                    ),
                ),
                (
                    "inference_detection_classification_tracker",
                    models.ManyToManyField(blank=True, to="events.inferencedetectionclassificationtracker"),
                ),
                ("inference_ocr", models.ManyToManyField(blank=True, to="events.inferenceocr")),
                ("key_frames", models.ManyToManyField(to="events.keyframes")),
                ("key_inference_classification", models.ManyToManyField(to="events.keyinferenceclassification")),
                (
                    "key_inference_detection_classification",
                    models.ManyToManyField(to="events.keyinferencedetectionclassification"),
                ),
                (
                    "key_inference_detection_classification_tracker",
                    models.ManyToManyField(to="events.keyinferencedetectionclassificationtracker"),
                ),
                ("key_inference_ocr", models.ManyToManyField(to="events.keyinferenceocr")),
                ("key_videos", models.ManyToManyField(to="events.keyvideos")),
                ("labels_detected", models.ManyToManyField(related_name="events_detected", to="events.label")),
                ("labels_missing", models.ManyToManyField(related_name="events_missing", to="events.label")),
                ("videos", models.ManyToManyField(to="events.video")),
            ],
        ),
        migrations.CreateModel(
            name="AreaOfInterest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("added_date", models.DateTimeField(auto_now_add=True, verbose_name="date created")),
                ("added_modified", models.DateTimeField(auto_now=True, verbose_name="date modified")),
                ("enabled", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "geometry",
                    django_jsonform.models.fields.ArrayField(
                        base_field=django_jsonform.models.fields.ArrayField(
                            base_field=models.FloatField(validators=[cvback.events.models.validate_relative]), size=2
                        ),
                        size=None,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("camera", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="devices.camera")),
            ],
        ),
    ]
